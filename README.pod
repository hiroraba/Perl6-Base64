=pod

=encoding utf8

=head2 Base64

Lazy base64 encoding and decoding routines

=for HTML <a href="https://travis-ci.org/ugexe/Perl6-Base64"><img src="https://travis-ci.org/ugexe/zef.svg?branch=master"></a>

=head3 SYNOPSIS

    use Base64;

    say encode-base64("g-g-g-g-g unit", :seq).join
    > Zy1nLWctZy1nIHVuaXQ=

    # or more simply

    say encode-base64("g-g-g-g-g unit")
    > Zy1nLWctZy1nIHVuaXQ=


    say Buf.new(decode-base64("Zy1nLWctZy1nIHVuaXQ=", :seq)).decode
    > g-g-g-g-g unit

    # or more simply

    say decode-base64("Zy1nLWctZy1nIHVuaXQ=").decode
    > g-g-g-g-g unit

=head3 Exports

=head4 B<routine> L<encode-base64> C<$encode-me where Buf|Str, :$pad, :@alpha, Bool :$seq = False> I<returns> C<Str|Seq>

    encode-base64($encode-me)                  # Returns a base64 encoded string
    encode-base64($encode-me, :seq)            # Return a sequence (for stream processing)
    encode-base64($encode-me, :!pad)           # No padding
    encode-base64($encode-me, :pad("*"))       # Alternative padding character
    encode-base64($encode-me, :uri)            # Use '-' and '_' for chars 63 and 64
    encode-base64($encode-me, :alpha(1..64))   # Set the entire alphabet
    encode-base64($encode-me, :alpha('-','_')) # Same as :uri

Takes a C<Buf> and applies base64 encoding with the requested options. If passed a C<Str> it will be converted to a C<Buf> via C<.ords> first.

    say encode-base64("any carnal pleasure.")
    # YW55IGNhcm5hbCBwbGVhc3VyZS4=

=head4 B<routine> L<decode-base64> C<$decode-me where Buf|Str, :$pad, :@alpha, Bool :$seq = False> I<returns> C<Buf|Seq>

    decode-base64($decode-me)                  # Decodes a base64 encoded string to a Buf for further decoding
    encode-base64($encode-me, :seq)            # Return a sequence (for stream processing)
    decode-base64($decode-me, :!pad)           # No padding
    decode-base64($decode-me, :pad("*"))       # Alternative padding character
    decode-base64($decode-me, :uri)            # Use '-' and '_' for chars 63 and 64
    decode-base64($decode-me, :alpha(1..64))   # Set the entire alphabet
    decode-base64($decode-me, :alpha('-','_')) # Same as :uri

Takes a C<Str> and applies base64 decoding with the requested options. If passed a C<Buf> it will be converted to a C<Str> with C<.decode> first.

    say decode-base64("YW55IGNhcm5hbCBwbGVhc3VyZS4=")
    # any carnal pleasure.

=head3 TODO 

=over 4

=item * Provide C<Supply> based routines for streaming IO

=item * Handle line lengths, per requested, transparently for the user

=back

=cut
